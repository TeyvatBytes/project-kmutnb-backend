// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id            Int             @id @default(autoincrement())
  password      String
  username      String          @unique
  isDeveloper   Boolean         @default(false)
  balance       Float           @default(0)
  shop          shop[]
  order         order[]
  product_stock product_stock[]
  user_topup    user_topup[]

  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  shop_withdrawal_manage  shop_withdrawal[] @relation("manage_user")
  shop_withdrawal_request shop_withdrawal[] @relation("request_user")
}

enum TOPUP_TYPE {
  TRUEAUNGPAO
}

model user_topup {
  id Int @id @default(autoincrement())

  amount Float
  type   TOPUP_TYPE

  user_id Int
  user    user @relation(fields: [user_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model shop {
  id          Int    @id @default(autoincrement())
  owner_id    Int    @default(autoincrement())
  owner       user   @relation(fields: [owner_id], references: [id])
  balance     Float  @default(0)
  description String @default("")
  logo        String @default("")
  name        String @default("")
  slug        String @unique
  review      Float  @default(5.0)

  contact String @default("")
  policy  String @default("")

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  products        product[]
  orders          order[]
  shop_withdrawal shop_withdrawal[]
}

enum WITHDRAWAL_STATUS {
  PENDING
  APPROVED
  REJECTED
}

model shop_withdrawal {
  id Int @id @default(autoincrement())

  amount Float
  status WITHDRAWAL_STATUS

  shop_id         Int
  shop            shop @relation(fields: [shop_id], references: [id])
  request_user_id Int
  request_user    user @relation(name: "request_user", fields: [request_user_id], references: [id])
  manage_user_id  Int
  manage_user     user @relation(name: "manage_user", fields: [manage_user_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model product {
  id          Int     @id @default(autoincrement())
  shop_id     Int
  shop        shop    @relation(fields: [shop_id], references: [id])
  name        String
  description String  @default("")
  image       String?
  price       Float   @default(0)
  category    String?

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  product_stock product_stock[]
}

model product_stock {
  id Int @id @default(autoincrement())

  productId Int
  product   product  @relation(fields: [productId], references: [id])
  data      String
  buyer     user?    @relation(fields: [buyerId], references: [id])
  buyerId   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ORDER_STATUS {
  PENDING
  SUCCESS
  CANCELLED
  CANCELLED_REFUND
}

model order {
  id            Int          @id @default(autoincrement())
  user_id       Int          @default(autoincrement())
  user          user         @relation(fields: [user_id], references: [id])
  shop_id       Int
  shop          shop         @relation(fields: [shop_id], references: [id])
  product_name  String       @default("")
  product_price Float        @default(0)
  quantity      Int          @default(1)
  data          String
  status        ORDER_STATUS
  price         Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
